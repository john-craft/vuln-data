import {readFileSync} from "fs";

// Read timeline data from all years
const years = [2023, 2024, 2025];
const allTimelineData = [];

for (const year of years) {
  try {
    const yearData = JSON.parse(readFileSync(`src/data/cache/cve-timeline-${year}.json`, "utf8"));
    allTimelineData.push(...yearData);
  } catch (error) {
    console.warn(`Warning: Could not load data for year ${year}: ${error.message}`);
  }
}

/**
 * Get the ISO week number for a date
 * @param {Date} date - The date to get the week for
 * @returns {string} - Week in format "2024-W01"
 */
function getISOWeek(date) {
  const target = new Date(date.valueOf());
  const dayNr = (date.getUTCDay() + 6) % 7;
  target.setUTCDate(target.getUTCDate() - dayNr + 3);
  const firstThursday = target.valueOf();
  target.setUTCMonth(0, 1);
  if (target.getUTCDay() !== 4) {
    target.setUTCMonth(0, 1 + ((4 - target.getUTCDay()) + 7) % 7);
  }
  const weekNumber = 1 + Math.ceil((firstThursday - target) / 604800000);
  return `${date.getFullYear()}-W${weekNumber.toString().padStart(2, '0')}`;
}

/**
 * Get the start and end dates for an ISO week
 * @param {string} weekString - Week in format "2024-W01"
 * @returns {Object} - {startDate: Date, endDate: Date}
 */
function getWeekDates(weekString) {
  const [year, week] = weekString.split('-W');
  const jan4 = new Date(parseInt(year), 0, 4);
  const firstMonday = new Date(jan4);
  firstMonday.setDate(jan4.getDate() - jan4.getDay() + 1);
  
  const weekStart = new Date(firstMonday);
  weekStart.setDate(firstMonday.getDate() + (parseInt(week) - 1) * 7);
  
  const weekEnd = new Date(weekStart);
  weekEnd.setDate(weekStart.getDate() + 6);
  
  return {
    startDate: weekStart.toISOString().split('T')[0],
    endDate: weekEnd.toISOString().split('T')[0]
  };
}

// Create weekly bins for all years
const weeklyData = new Map();

// Process each CVE event from all years
for (const event of allTimelineData) {
  const date = new Date(event.date);
  const week = getISOWeek(date);
  
  if (!weeklyData.has(week)) {
    const {startDate, endDate} = getWeekDates(week);
    weeklyData.set(week, {
      week,
      startDate,
      endDate,
      year: date.getFullYear(),
      total: 0,
      projects: {},
      severities: {},
      events: []
    });
  }
  
  const weekData = weeklyData.get(week);
  weekData.total++;
  
  // Count by project
  weekData.projects[event.project] = (weekData.projects[event.project] || 0) + 1;
  
  // Count by severity
  weekData.severities[event.severity] = (weekData.severities[event.severity] || 0) + 1;
  
  // Keep track of individual events for hover details
  weekData.events.push(event);
}

// Convert to array and sort by week
const result = Array.from(weeklyData.values())
  .sort((a, b) => a.week.localeCompare(b.week));

// Export the multi-year weekly aggregated data
process.stdout.write(JSON.stringify(result, null, 2));